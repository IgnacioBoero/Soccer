diff --git a/prepare_data.py b/prepare_data.py
index 485570d..851a71c 100644
--- a/prepare_data.py
+++ b/prepare_data.py
@@ -179,8 +179,8 @@ def cli():
     ap = argparse.ArgumentParser("Prepare soccer data (sharded, robust)")
     ap.add_argument("--input", "-i", type=Path, default='data/trajectories_left2right.pkl')
     ap.add_argument("--outdir", "-o", type=Path, default='data/processed')
-    ap.add_argument("--shard-size", "-n", type=int, default=100)
-    ap.add_argument("--gamma", type=float, default=0.99)
+    ap.add_argument("--shard-size", "-n", type=int, default=1000)
+    ap.add_argument("--gamma", type=float, default=0.9)
     args = ap.parse_args()
 
     args.outdir.mkdir(parents=True, exist_ok=True)
diff --git a/test.ipynb b/test.ipynb
index 37c6671..92b8bae 100644
--- a/test.ipynb
+++ b/test.ipynb
@@ -219,11 +219,536 @@
     "    buf.append(process_single_traj(traj, traj_id, 0.9))\n",
     "\n"
    ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Processed Fata VIsualtization"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import pickle, random, torch\n",
+    "from torch.utils.data import IterableDataset\n",
+    "from pathlib import Path\n",
+    "\n",
+    "class ShardedSoccerDataset(IterableDataset):\n",
+    "    def __init__(self, shard_dir: str | Path, shuffle_shards=True):\n",
+    "        self.paths = sorted(Path(shard_dir).glob(\"*.pkl\"))\n",
+    "        self.shuffle_shards = shuffle_shards\n",
+    "\n",
+    "    def __iter__(self):\n",
+    "        paths = self.paths.copy()\n",
+    "        if self.shuffle_shards:\n",
+    "            random.shuffle(paths)        # order of shards each epoch\n",
+    "        for p in paths:\n",
+    "            with p.open(\"rb\") as f:\n",
+    "                shard = pickle.load(f)   # load ONE shard into RAM\n",
+    "            random.shuffle(shard)        # in-shard shuffle\n",
+    "            for traj in shard:\n",
+    "                for sample in traj:\n",
+    "                    yield sample             # hand a single transition to DataLoader\n",
+    "\n",
+    "\n",
+    "dataset = ShardedSoccerDataset((Path('./data/processed')))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "from torch.utils.data import Dataset, DataLoader\n",
+    "loader = DataLoader(dataset, batch_size=4,\n",
+    "                                 shuffle=not True, num_workers=4,\n",
+    "                                 pin_memory=True, persistent_workers=True) "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{'state': tensor([[[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 2.1892e+01,  2.1624e+01,  2.1399e+01,  ...,  6.2298e+01,\n",
+      "            6.3241e+01,  6.4185e+01],\n",
+      "          [ 2.0937e+01,  2.0656e+01,  2.0421e+01,  ...,  6.1969e+01,\n",
+      "            6.2916e+01,  6.3865e+01],\n",
+      "          [ 1.9986e+01,  1.9692e+01,  1.9445e+01,  ...,  6.1654e+01,\n",
+      "            6.2606e+01,  6.3560e+01],\n",
+      "          ...,\n",
+      "          [ 8.0294e+01,  8.0221e+01,  8.0161e+01,  ...,  9.9242e+01,\n",
+      "            9.9836e+01,  1.0044e+02],\n",
+      "          [ 8.1291e+01,  8.1219e+01,  8.1159e+01,  ...,  1.0005e+02,\n",
+      "            1.0064e+02,  1.0124e+02],\n",
+      "          [ 8.2288e+01,  8.2217e+01,  8.2158e+01,  ...,  1.0086e+02,\n",
+      "            1.0145e+02,  1.0204e+02]],\n",
+      "\n",
+      "         [[-9.0659e-01, -9.2069e-01, -9.3511e-01,  ...,  6.0921e-01,\n",
+      "            6.0751e-01,  6.0587e-01],\n",
+      "          [-9.0219e-01, -9.1689e-01, -9.3195e-01,  ...,  6.0437e-01,\n",
+      "            6.0274e-01,  6.0116e-01],\n",
+      "          [-8.9738e-01, -9.1271e-01, -9.2848e-01,  ...,  5.9948e-01,\n",
+      "            5.9792e-01,  5.9640e-01],\n",
+      "          ...,\n",
+      "          [-2.5130e-02, -2.1174e-02, -1.7212e-02,  ...,  2.0133e-01,\n",
+      "            2.0390e-01,  2.0644e-01],\n",
+      "          [-2.4821e-02, -2.0914e-02, -1.7000e-02,  ...,  1.9945e-01,\n",
+      "            2.0201e-01,  2.0454e-01],\n",
+      "          [-2.4520e-02, -2.0660e-02, -1.6793e-02,  ...,  1.9760e-01,\n",
+      "            2.0015e-01,  2.0267e-01]]],\n",
+      "\n",
+      "\n",
+      "        [[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 2.7888e+01,  2.7764e+01,  2.7675e+01,  ...,  6.6999e+01,\n",
+      "            6.7912e+01,  6.8827e+01],\n",
+      "          [ 2.6898e+01,  2.6770e+01,  2.6678e+01,  ...,  6.6593e+01,\n",
+      "            6.7511e+01,  6.8432e+01],\n",
+      "          [ 2.5910e+01,  2.5776e+01,  2.5681e+01,  ...,  6.6200e+01,\n",
+      "            6.7124e+01,  6.8049e+01],\n",
+      "          ...,\n",
+      "          [ 7.3500e+01,  7.3453e+01,  7.3420e+01,  ...,  9.5464e+01,\n",
+      "            9.6107e+01,  9.6756e+01],\n",
+      "          [ 7.4499e+01,  7.4452e+01,  7.4419e+01,  ...,  9.6235e+01,\n",
+      "            9.6873e+01,  9.7516e+01],\n",
+      "          [ 7.5497e+01,  7.5452e+01,  7.5419e+01,  ...,  9.7010e+01,\n",
+      "            9.7643e+01,  9.8281e+01]],\n",
+      "\n",
+      "         [[-9.5473e-01, -9.6609e-01, -9.7752e-01,  ...,  6.3518e-01,\n",
+      "            6.3325e-01,  6.3137e-01],\n",
+      "          [-9.5306e-01, -9.6482e-01, -9.7668e-01,  ...,  6.3083e-01,\n",
+      "            6.2894e-01,  6.2711e-01],\n",
+      "          [-9.5125e-01, -9.6346e-01, -9.7578e-01,  ...,  6.2642e-01,\n",
+      "            6.2459e-01,  6.2280e-01],\n",
+      "          ...,\n",
+      "          [-1.7126e-02, -1.2798e-02, -8.4660e-03,  ...,  2.2085e-01,\n",
+      "            2.2340e-01,  2.2591e-01],\n",
+      "          [-1.6896e-02, -1.2626e-02, -8.3523e-03,  ...,  2.1873e-01,\n",
+      "            2.2128e-01,  2.2378e-01],\n",
+      "          [-1.6672e-02, -1.2459e-02, -8.2415e-03,  ...,  2.1665e-01,\n",
+      "            2.1919e-01,  2.2169e-01]]],\n",
+      "\n",
+      "\n",
+      "        [[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 4.2486e+01,  4.2167e+01,  4.1870e+01,  ...,  6.4902e+01,\n",
+      "            6.5691e+01,  6.6486e+01],\n",
+      "          [ 4.1543e+01,  4.1217e+01,  4.0913e+01,  ...,  6.4289e+01,\n",
+      "            6.5085e+01,  6.5887e+01],\n",
+      "          [ 4.0602e+01,  4.0269e+01,  3.9958e+01,  ...,  6.3685e+01,\n",
+      "            6.4489e+01,  6.5299e+01],\n",
+      "          ...,\n",
+      "          [ 6.2466e+01,  6.2250e+01,  6.2049e+01,  ...,  7.9431e+01,\n",
+      "            8.0077e+01,  8.0730e+01],\n",
+      "          [ 6.3441e+01,  6.3228e+01,  6.3031e+01,  ...,  8.0200e+01,\n",
+      "            8.0840e+01,  8.1487e+01],\n",
+      "          [ 6.4417e+01,  6.4207e+01,  6.4013e+01,  ...,  8.0974e+01,\n",
+      "            8.1608e+01,  8.2249e+01]],\n",
+      "\n",
+      "         [[-8.9325e-01, -9.0038e-01, -9.0761e-01,  ...,  7.1211e-01,\n",
+      "            7.0912e-01,  7.0619e-01],\n",
+      "          [-8.9073e-01, -8.9800e-01, -9.0539e-01,  ...,  7.0822e-01,\n",
+      "            7.0525e-01,  7.0234e-01],\n",
+      "          [-8.8809e-01, -8.9551e-01, -9.0305e-01,  ...,  7.0426e-01,\n",
+      "            7.0130e-01,  6.9842e-01],\n",
+      "          ...,\n",
+      "          [-7.1860e-02, -6.6876e-02, -6.1858e-02,  ...,  2.2201e-01,\n",
+      "            2.2506e-01,  2.2806e-01],\n",
+      "          [-7.0736e-02, -6.5826e-02, -6.0883e-02,  ...,  2.1946e-01,\n",
+      "            2.2250e-01,  2.2549e-01],\n",
+      "          [-6.9647e-02, -6.4808e-02, -5.9938e-02,  ...,  2.1696e-01,\n",
+      "            2.1999e-01,  2.2297e-01]]],\n",
+      "\n",
+      "\n",
+      "        [[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 4.2893e+01,  4.2534e+01,  4.2195e+01,  ...,  6.3277e+01,\n",
+      "            6.4057e+01,  6.4843e+01],\n",
+      "          [ 4.1966e+01,  4.1598e+01,  4.1252e+01,  ...,  6.2652e+01,\n",
+      "            6.3440e+01,  6.4233e+01],\n",
+      "          [ 4.1041e+01,  4.0666e+01,  4.0311e+01,  ...,  6.2037e+01,\n",
+      "            6.2832e+01,  6.3633e+01],\n",
+      "          ...,\n",
+      "          [ 6.3165e+01,  6.2922e+01,  6.2693e+01,  ...,  7.8448e+01,\n",
+      "            7.9078e+01,  7.9716e+01],\n",
+      "          [ 6.4134e+01,  6.3894e+01,  6.3669e+01,  ...,  7.9230e+01,\n",
+      "            7.9854e+01,  8.0485e+01],\n",
+      "          [ 6.5103e+01,  6.4867e+01,  6.4645e+01,  ...,  8.0016e+01,\n",
+      "            8.0634e+01,  8.1260e+01]],\n",
+      "\n",
+      "         [[-8.7950e-01, -8.8646e-01, -8.9353e-01,  ...,  7.1689e-01,\n",
+      "            7.1376e-01,  7.1071e-01],\n",
+      "          [-8.7670e-01, -8.8378e-01, -8.9099e-01,  ...,  7.1294e-01,\n",
+      "            7.0983e-01,  7.0680e-01],\n",
+      "          [-8.7377e-01, -8.8099e-01, -8.8834e-01,  ...,  7.0892e-01,\n",
+      "            7.0583e-01,  7.0281e-01],\n",
+      "          ...,\n",
+      "          [-8.0749e-02, -7.5852e-02, -7.0918e-02,  ...,  2.1551e-01,\n",
+      "            2.1865e-01,  2.2174e-01],\n",
+      "          [-7.9503e-02, -7.4676e-02, -6.9813e-02,  ...,  2.1300e-01,\n",
+      "            2.1612e-01,  2.1920e-01],\n",
+      "          [-7.8295e-02, -7.3535e-02, -6.8742e-02,  ...,  2.1053e-01,\n",
+      "            2.1364e-01,  2.1671e-01]]]]), 'action': tensor([[ 0.0000,  1.0000,  0.0000, 20.9562,  6.3325, 27.6063,  3.9525],\n",
+      "        [ 1.0000,  0.0000,  0.0000, 27.6063,  3.9525, 40.1188, 13.9825],\n",
+      "        [ 0.0000,  1.0000,  0.0000, 40.1188, 13.9825, 39.8563, 15.8525],\n",
+      "        [ 1.0000,  0.0000,  0.0000, 39.8563, 15.8525, 43.7938, 20.1025]]), 'reward': tensor([0., 0., 0., 0.], dtype=torch.float64), 'next_state': tensor([[[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 2.7888e+01,  2.7764e+01,  2.7675e+01,  ...,  6.6999e+01,\n",
+      "            6.7912e+01,  6.8827e+01],\n",
+      "          [ 2.6898e+01,  2.6770e+01,  2.6678e+01,  ...,  6.6593e+01,\n",
+      "            6.7511e+01,  6.8432e+01],\n",
+      "          [ 2.5910e+01,  2.5776e+01,  2.5681e+01,  ...,  6.6200e+01,\n",
+      "            6.7124e+01,  6.8049e+01],\n",
+      "          ...,\n",
+      "          [ 7.3500e+01,  7.3453e+01,  7.3420e+01,  ...,  9.5464e+01,\n",
+      "            9.6107e+01,  9.6756e+01],\n",
+      "          [ 7.4499e+01,  7.4452e+01,  7.4419e+01,  ...,  9.6235e+01,\n",
+      "            9.6873e+01,  9.7516e+01],\n",
+      "          [ 7.5497e+01,  7.5452e+01,  7.5419e+01,  ...,  9.7010e+01,\n",
+      "            9.7643e+01,  9.8281e+01]],\n",
+      "\n",
+      "         [[-9.5473e-01, -9.6609e-01, -9.7752e-01,  ...,  6.3518e-01,\n",
+      "            6.3325e-01,  6.3137e-01],\n",
+      "          [-9.5306e-01, -9.6482e-01, -9.7668e-01,  ...,  6.3083e-01,\n",
+      "            6.2894e-01,  6.2711e-01],\n",
+      "          [-9.5125e-01, -9.6346e-01, -9.7578e-01,  ...,  6.2642e-01,\n",
+      "            6.2459e-01,  6.2280e-01],\n",
+      "          ...,\n",
+      "          [-1.7126e-02, -1.2798e-02, -8.4660e-03,  ...,  2.2085e-01,\n",
+      "            2.2340e-01,  2.2591e-01],\n",
+      "          [-1.6896e-02, -1.2626e-02, -8.3523e-03,  ...,  2.1873e-01,\n",
+      "            2.2128e-01,  2.2378e-01],\n",
+      "          [-1.6672e-02, -1.2459e-02, -8.2415e-03,  ...,  2.1665e-01,\n",
+      "            2.1919e-01,  2.2169e-01]]],\n",
+      "\n",
+      "\n",
+      "        [[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 4.2486e+01,  4.2167e+01,  4.1870e+01,  ...,  6.4902e+01,\n",
+      "            6.5691e+01,  6.6486e+01],\n",
+      "          [ 4.1543e+01,  4.1217e+01,  4.0913e+01,  ...,  6.4289e+01,\n",
+      "            6.5085e+01,  6.5887e+01],\n",
+      "          [ 4.0602e+01,  4.0269e+01,  3.9958e+01,  ...,  6.3685e+01,\n",
+      "            6.4489e+01,  6.5299e+01],\n",
+      "          ...,\n",
+      "          [ 6.2466e+01,  6.2250e+01,  6.2049e+01,  ...,  7.9431e+01,\n",
+      "            8.0077e+01,  8.0730e+01],\n",
+      "          [ 6.3441e+01,  6.3228e+01,  6.3031e+01,  ...,  8.0200e+01,\n",
+      "            8.0840e+01,  8.1487e+01],\n",
+      "          [ 6.4417e+01,  6.4207e+01,  6.4013e+01,  ...,  8.0974e+01,\n",
+      "            8.1608e+01,  8.2249e+01]],\n",
+      "\n",
+      "         [[-8.9325e-01, -9.0038e-01, -9.0761e-01,  ...,  7.1211e-01,\n",
+      "            7.0912e-01,  7.0619e-01],\n",
+      "          [-8.9073e-01, -8.9800e-01, -9.0539e-01,  ...,  7.0822e-01,\n",
+      "            7.0525e-01,  7.0234e-01],\n",
+      "          [-8.8809e-01, -8.9551e-01, -9.0305e-01,  ...,  7.0426e-01,\n",
+      "            7.0130e-01,  6.9842e-01],\n",
+      "          ...,\n",
+      "          [-7.1860e-02, -6.6876e-02, -6.1858e-02,  ...,  2.2201e-01,\n",
+      "            2.2506e-01,  2.2806e-01],\n",
+      "          [-7.0736e-02, -6.5826e-02, -6.0883e-02,  ...,  2.1946e-01,\n",
+      "            2.2250e-01,  2.2549e-01],\n",
+      "          [-6.9647e-02, -6.4808e-02, -5.9938e-02,  ...,  2.1696e-01,\n",
+      "            2.1999e-01,  2.2297e-01]]],\n",
+      "\n",
+      "\n",
+      "        [[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 4.2893e+01,  4.2534e+01,  4.2195e+01,  ...,  6.3277e+01,\n",
+      "            6.4057e+01,  6.4843e+01],\n",
+      "          [ 4.1966e+01,  4.1598e+01,  4.1252e+01,  ...,  6.2652e+01,\n",
+      "            6.3440e+01,  6.4233e+01],\n",
+      "          [ 4.1041e+01,  4.0666e+01,  4.0311e+01,  ...,  6.2037e+01,\n",
+      "            6.2832e+01,  6.3633e+01],\n",
+      "          ...,\n",
+      "          [ 6.3165e+01,  6.2922e+01,  6.2693e+01,  ...,  7.8448e+01,\n",
+      "            7.9078e+01,  7.9716e+01],\n",
+      "          [ 6.4134e+01,  6.3894e+01,  6.3669e+01,  ...,  7.9230e+01,\n",
+      "            7.9854e+01,  8.0485e+01],\n",
+      "          [ 6.5103e+01,  6.4867e+01,  6.4645e+01,  ...,  8.0016e+01,\n",
+      "            8.0634e+01,  8.1260e+01]],\n",
+      "\n",
+      "         [[-8.7950e-01, -8.8646e-01, -8.9353e-01,  ...,  7.1689e-01,\n",
+      "            7.1376e-01,  7.1071e-01],\n",
+      "          [-8.7670e-01, -8.8378e-01, -8.9099e-01,  ...,  7.1294e-01,\n",
+      "            7.0983e-01,  7.0680e-01],\n",
+      "          [-8.7377e-01, -8.8099e-01, -8.8834e-01,  ...,  7.0892e-01,\n",
+      "            7.0583e-01,  7.0281e-01],\n",
+      "          ...,\n",
+      "          [-8.0749e-02, -7.5852e-02, -7.0918e-02,  ...,  2.1551e-01,\n",
+      "            2.1865e-01,  2.2174e-01],\n",
+      "          [-7.9503e-02, -7.4676e-02, -6.9813e-02,  ...,  2.1300e-01,\n",
+      "            2.1612e-01,  2.1920e-01],\n",
+      "          [-7.8295e-02, -7.3535e-02, -6.8742e-02,  ...,  2.1053e-01,\n",
+      "            2.1364e-01,  2.1671e-01]]],\n",
+      "\n",
+      "\n",
+      "        [[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          ...,\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00],\n",
+      "          [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
+      "            0.0000e+00,  0.0000e+00]],\n",
+      "\n",
+      "         [[ 4.8187e+01,  4.7779e+01,  4.7388e+01,  ...,  6.2719e+01,\n",
+      "            6.3439e+01,  6.4166e+01],\n",
+      "          [ 4.7280e+01,  4.6864e+01,  4.6465e+01,  ...,  6.2025e+01,\n",
+      "            6.2753e+01,  6.3488e+01],\n",
+      "          [ 4.6377e+01,  4.5952e+01,  4.5546e+01,  ...,  6.1339e+01,\n",
+      "            6.2075e+01,  6.2818e+01],\n",
+      "          ...,\n",
+      "          [ 6.0636e+01,  6.0311e+01,  6.0002e+01,  ...,  7.2721e+01,\n",
+      "            7.3343e+01,  7.3972e+01],\n",
+      "          [ 6.1580e+01,  6.1261e+01,  6.0956e+01,  ...,  7.3510e+01,\n",
+      "            7.4125e+01,  7.4749e+01],\n",
+      "          [ 6.2526e+01,  6.2212e+01,  6.1912e+01,  ...,  7.4305e+01,\n",
+      "            7.4913e+01,  7.5530e+01]],\n",
+      "\n",
+      "         [[-8.6302e-01, -8.6908e-01, -8.7523e-01,  ...,  7.4604e-01,\n",
+      "            7.4254e-01,  7.3911e-01],\n",
+      "          [-8.6021e-01, -8.6636e-01, -8.7262e-01,  ...,  7.4237e-01,\n",
+      "            7.3887e-01,  7.3545e-01],\n",
+      "          [-8.5729e-01, -8.6354e-01, -8.6989e-01,  ...,  7.3861e-01,\n",
+      "            7.3511e-01,  7.3170e-01],\n",
+      "          ...,\n",
+      "          [-1.0756e-01, -1.0259e-01, -9.7553e-02,  ...,  2.1181e-01,\n",
+      "            2.1523e-01,  2.1858e-01],\n",
+      "          [-1.0585e-01, -1.0094e-01, -9.5978e-02,  ...,  2.0914e-01,\n",
+      "            2.1254e-01,  2.1588e-01],\n",
+      "          [-1.0419e-01, -9.9344e-02, -9.4451e-02,  ...,  2.0652e-01,\n",
+      "            2.0991e-01,  2.1324e-01]]]]), 'next_action': tensor([[ 1.0000,  0.0000,  0.0000, 27.6063,  3.9525, 40.1188, 13.9825],\n",
+      "        [ 0.0000,  1.0000,  0.0000, 40.1188, 13.9825, 39.8563, 15.8525],\n",
+      "        [ 1.0000,  0.0000,  0.0000, 39.8563, 15.8525, 43.7938, 20.1025],\n",
+      "        [ 0.0000,  1.0000,  0.0000, 43.7938, 20.1025, 53.0687, 12.2825]]), 'done': tensor([False, False, False, False]), 'traj_id': tensor([13416, 13416, 13416, 13416]), 't': tensor([0, 1, 2, 3]), 'G': tensor([-5.9049, -6.5610, -7.2900, -8.1000], dtype=torch.float64)}\n"
+     ]
+    }
+   ],
+   "source": [
+    "for batch in loader:\n",
+    "    print(batch)\n",
+    "    break"
+   ]
   }
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "meam6000",
+   "display_name": "pda",
    "language": "python",
    "name": "python3"
   },
@@ -237,7 +762,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.8.20"
+   "version": "3.13.2"
   }
  },
  "nbformat": 4,
diff --git a/train.py b/train.py
index 84072c3..6837314 100644
--- a/train.py
+++ b/train.py
@@ -14,7 +14,6 @@ import wandb
 
 # --------------------------------------------------------------------------- #
 #                          Model architecture                                 #
-# --------------------------------------------------------------------------- #
 class StateEncoderCNN(nn.Module):
     """CNN that maps 4×104×68 tensors → state embedding."""
 
@@ -23,12 +22,14 @@ class StateEncoderCNN(nn.Module):
         self.net = nn.Sequential(
             nn.Conv2d(in_channels, 32, kernel_size=5, stride=2, padding=2),  # → 32×52×34
             nn.ReLU(inplace=True),
-            nn.Conv2d(32, 64, kernel_size=5, stride=2, padding=2),           # → 64×26×17
+            nn.MaxPool2d(kernel_size=2, stride=2),                           # → 32×26×17
+            nn.Conv2d(32, 64, kernel_size=5, stride=2, padding=2),           # → 64×13×9
             nn.ReLU(inplace=True),
-            nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1),          # → 128×13×9
+            nn.MaxPool2d(kernel_size=2, stride=2),                           # → 64×6×4
+            nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1),          # → 128×3×2
             nn.ReLU(inplace=True),
             nn.Flatten(),
-            nn.Linear(128 * 13 * 9, out_dim),
+            nn.Linear(128 * 3 * 2, out_dim),
             nn.ReLU(inplace=True),
         )
 
@@ -211,8 +212,9 @@ class ShardedSoccerDataset(IterableDataset):
             with p.open("rb") as f:
                 shard = pickle.load(f)   # load ONE shard into RAM
             random.shuffle(shard)        # in-shard shuffle
-            for sample in shard:
-                yield sample             # hand a single transition to DataLoader
+            for traj in shard:
+                for sample in traj:
+                    yield sample             # hand a single transition to DataLoader
                 
 # --------------------------------------------------------------------------- #
 #                               Entry point                                   #
@@ -228,8 +230,7 @@ if __name__ == '__main__':
     ap.add_argument('--target', choices=['mc', 'td0'], default='td0')
     args = ap.parse_args()
 
-    shard_paths = sorted(args.shards.glob('*.pkl'))
-    dataset = ShardedSoccerDataset(shard_paths)
+    dataset = ShardedSoccerDataset(args.shards)
 
     q_net = QNetwork()
     trainer = Trainer(q_net, dataset, epochs=args.epochs, target_type=args.target)
